{"conceptual":"\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"8\" sourceendlinenumber=\"8\">You can use the client API to read events from a stream starting from either end of the stream. There is a method for each direction and one for reading a single event.</p>\n<h2 id=\"methods\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"10\" sourceendlinenumber=\"10\">Methods</h2>\n<!-- TODO: Explanations? -->\n<!-- TODO: Moved, check -->\n<h3 id=\"reading-a-single-event\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"16\" sourceendlinenumber=\"16\">Reading a single event</h3>\n<pre sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"18\" sourceendlinenumber=\"20\"><code class=\"lang-csharp\">Task&lt;EventReadResult&gt; ReadEventAsync(string stream, long eventNumber, bool resolveLinkTos);\n</code></pre><h3 id=\"reading-a-specific-stream-forwards\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"22\" sourceendlinenumber=\"22\">Reading a specific stream forwards</h3>\n<pre sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"24\" sourceendlinenumber=\"26\"><code class=\"lang-csharp\">Task&lt;StreamEventsSlice&gt; ReadStreamEventsForwardAsync(string stream, long start, int count, bool resolveLinkTos)\n</code></pre><h3 id=\"reading-a-specific-stream-backwards\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"28\" sourceendlinenumber=\"28\">Reading a specific stream backwards</h3>\n<pre sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"30\" sourceendlinenumber=\"32\"><code class=\"lang-csharp\">Task&lt;StreamEventsSlice&gt; ReadStreamEventsBackwardAsync(string stream, long start, int count, bool resolveLinkTos)\n</code></pre><h3 id=\"reading-all-events-forwards\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">Reading all events forwards</h3>\n<pre sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"38\"><code class=\"lang-csharp\">Task&lt;AllEventsSlice&gt; ReadAllEventsForwardAsync(Position position, int maxCount, bool resolveLinkTos);\n</code></pre><h3 id=\"reading-all-events-backwards\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"40\" sourceendlinenumber=\"40\">Reading all events backwards</h3>\n<pre sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"42\" sourceendlinenumber=\"44\"><code class=\"lang-csharp\">Task&lt;AllEventsSlice&gt; ReadAllEventsBackwardAsync(Position position, int maxCount, bool resolveLinkTos);\n</code></pre><div class=\"NOTE\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"46\" sourceendlinenumber=\"46\"><h5>Note</h5><p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"47\" sourceendlinenumber=\"47\">These methods also have an optional parameter which allows you to specify the <code>UserCredentials</code> to use for the request. If you don&#39;t supply any, the default credentials for the <code>EventStoreConnection</code> will be used (<a href=\"~/dotnet-api/connecting-to-a-server.md#user-credentials\" data-raw-source=\"[See Connecting to a Server - User Credentials](connecting-to-a-server.md#user-credentials)\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"47\" sourceendlinenumber=\"47\">See Connecting to a Server - User Credentials</a>).</p>\n</div>\n<h2 id=\"streameventsslice\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"49\" sourceendlinenumber=\"49\">StreamEventsSlice</h2>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"51\" sourceendlinenumber=\"51\">The reading methods for individual streams each return a <code>StreamEventsSlice</code>, which is immutable. The available members on <code>StreamEventsSlice</code> are:</p>\n<!-- TODO: Moved, check -->\n<table>\n    <thead>\n        <tr>\n            <th>Member</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>string Stream</code></td>\n            <td>The name of the stream for the slice</td>\n        </tr>\n        <tr>\n            <td><code>ReadDirection&nbsp;ReadDirection</code></td>\n            <td>Either <code>ReadDirection.Forward</code> or <code>ReadDirection.Backward</code> depending on which method was used to read</td>\n        </tr>\n        <tr>\n            <td><code>long FromEventNumber</code></td>\n            <td>The sequence number of the first event in the stream</td>\n        </tr>\n        <tr>\n            <td><code>long LastEventNumber</code></td>\n            <td>The sequence number of the last event in the stream</td>\n        </tr>\n        <tr>\n            <td><code>long NextEventNumber</code></td>\n            <td>The sequence number from which the next read should be performed to continue reading the stream</td>\n        </tr>\n        <tr>\n            <td><code>bool IsEndOfStream</code></td>\n            <td>Whether or not this slice contained the end of the stream at the time it was created</td>\n        </tr>\n        <tr>\n            <td><code>ResolvedEvent[] Events</code></td>\n            <td>An array of the events read. See the description of how to interpret a <a href=\"#ResolvedEvent\">Resolved Events</a> below for more information on this</td>\n        </tr>\n    </tbody>\n</table>\n\n<h2 id=\"resolvedevent\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"94\" sourceendlinenumber=\"94\">ResolvedEvent</h2>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"96\" sourceendlinenumber=\"96\">When events are read from a stream (or received over a subscription) you will receive an instance of the <code>RecordedEvent</code> class packaged inside a <code>ResolvedEvent</code>.</p>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"98\" sourceendlinenumber=\"98\">Event Store supports a special type of event called &#39;Link Events&#39;. You can think of these events as pointers to an event in another stream.</p>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"100\" sourceendlinenumber=\"100\">In situations where the event you read is a link event, <code>ResolvedEvent</code> allows you to access both the link event itself, as well as the event it points to.</p>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"102\" sourceendlinenumber=\"102\">The members of this class are as follows:</p>\n<!-- TODO: Moved, check -->\n<table>\n    <thead>\n        <tr>\n            <th>Member</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>RecordedEvent Event</code></td>\n            <td>The event, or the resolved link event if this <code>ResolvedEvent</code> is a link event</td>\n        </tr>\n        <tr>\n            <td><code>RecordedEvent Link</code></td>\n            <td>The link event if this <code>ResolvedEvent</code> is a link event</td>\n        </tr>\n        <tr>\n            <td><code>RecordedEvent&nbsp;OriginalEvent</code></td>\n            <td>Returns the event that was read or which triggered the subscription. If this <code>ResolvedEvent</code> represents a link event, the link will be the <code>OriginalEvent</code>, otherwise it will be the event</td>\n        </tr>\n        <tr>\n            <td><code>bool IsResolved</code></td>\n            <td>Indicates whether this <code>ResolvedEvent</code> is a resolved link event</td>\n        </tr>\n        <tr>\n            <td><code>Position? OriginalPosition</code></td>\n            <td>The logical position of the <code>OriginalEvent</code></td>\n        </tr>\n        <tr>\n            <td><code>string OriginalStreamId</code></td>\n            <td>The stream name of the <code>OriginalEvent</code></td>\n        </tr>\n        <tr>\n            <td><code>long OriginalEventNumber</code></td>\n            <td>The event number in the stream of the <code>OriginalEvent</code></td>\n        </tr>\n    </tbody>\n</table>\n\n<div class=\"NOTE\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"145\" sourceendlinenumber=\"145\"><h5>Note</h5><p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"146\" sourceendlinenumber=\"146\">To ensure that the Event Store server follows link events when reading, ensure you set the <code>ResolveLinkTos</code> parameter to <code>true</code> when calling read methods.</p>\n</div>\n<h2 id=\"recordedevent\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"148\" sourceendlinenumber=\"148\">RecordedEvent</h2>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"150\" sourceendlinenumber=\"150\"><code>RecordedEvent</code> contains all the data about a specific event. Instances of this class are immutable, and expose the following members:</p>\n<!-- TODO: Moved, to check -->\n<table>\n    <thead>\n        <tr>\n            <th>Member</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>string EventStreamId</code></td>\n            <td>The Event Stream this event belongs to</td>\n        </tr>\n        <tr>\n            <td><code>Guid EventId</code></td>\n            <td>The Unique Identifier representing this event</td>\n        </tr>\n        <tr>\n            <td><code>long EventNumber</code></td>\n            <td>The number of this event in the stream</td>\n        </tr>\n        <tr>\n            <td><code>string EventType</code></td>\n            <td>The type of event this is (supplied when writing)</td>\n        </tr>\n        <tr>\n            <td><code>byte[] Data</code></td>\n            <td>A byte array representing the data of this event</td>\n        </tr>\n        <tr>\n            <td><code>byte[] Metadata</code></td>\n            <td>A byte array representing the metadata associated with this event</td>\n        </tr>\n        <tr>\n            <td><code>bool IsJson</code></td>\n            <td>Indicates whether the content was internally marked as json</td>\n        </tr>\n        <tr>\n            <td><code>DateTime Created</code></td>\n            <td>A datetime representing when this event was created in the system</td>\n        </tr>\n        <tr>\n            <td><code>long CreatedEpoch</code></td>\n            <td>A long representing the milliseconds since the epoch when the was created in the system</td>\n        </tr>\n    </tbody>\n</table>\n\n<h2 id=\"reading-a-single-event-1\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"201\" sourceendlinenumber=\"201\">Reading a single event</h2>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"203\" sourceendlinenumber=\"203\">The <code>ReadEventAsync</code> method reads a single event from a stream at a specified position. This is the simplest case of reading events, but is still useful for situations such as reading the last event in the stream used as a starting point for a subscription. This function accepts three parameters:</p>\n<table>\n    <thead>\n        <tr>\n            <th>Parameter</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>string stream</code></td>\n            <td>The stream to read from</td>\n        </tr>\n        <tr>\n            <td><code>long eventNumber</code></td>\n            <td>The event number to read (use <code>StreamPosition.End</code> to read the last event in the stream)</td>\n        </tr>\n        <tr>\n            <td><code>bool&nbsp;resolveLinkTos</code></td>\n            <td>Determines whether any link events encountered in the stream will be resolved. See the discussion on <a href=\"#ResolvedEvent\">Resolved Events</a> for more information on this</td>\n        </tr>\n    </tbody>\n</table>\n\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"228\" sourceendlinenumber=\"228\">This method returns an instance of <code>EventReadResult</code> which indicates if the read was successful, and if so the <code>ResolvedEvent</code> that was read.</p>\n<h2 id=\"reading-a-stream-forwards\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"230\" sourceendlinenumber=\"230\">Reading a stream forwards</h2>\n<!-- TODO: Moved, check -->\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"234\" sourceendlinenumber=\"234\">The <code>ReadStreamEventsForwardAsync</code> method reads the requested number of events in the order in which they were originally written to the stream from a nominated starting point in the stream.</p>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"236\" sourceendlinenumber=\"236\">The parameters are:</p>\n<table>\n    <thead>\n        <tr>\n            <th>Parameter</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>string Stream</code></td>\n            <td>The name of the stream to read</td>\n        </tr>\n        <tr>\n            <td><code>long start</code></td>\n            <td>The earliest event to read (inclusive). For the special case of the start of the stream, you should use the constant <code>StreamPosition.Start</code>.</td>\n        </tr>\n        <tr>\n            <td><code>int count</code></td>\n            <td>The maximum number of events to read in this request (assuming that many exist between the start specified and the end of the stream)</td>\n        </tr>\n        <tr>\n            <td><code>bool&nbsp;resolveLinkTos</code></td>\n            <td>Determines whether any link events encountered in the stream will be resolved. See the discussion on <a href=\"#ResolvedEvent\">Resolved Events</a> for more information on this</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3 id=\"example-reading-an-entire-stream-forwards-from-start-to-end\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"265\" sourceendlinenumber=\"265\">Example: Reading an entire stream forwards from start to end</h3>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"267\" sourceendlinenumber=\"267\">This example uses the <code>ReadStreamEventsForwardAsync</code> method in a loop to page through all events in a stream, reading 200 events at a time to build a list of all the events in the stream.</p>\n<pre sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"269\" sourceendlinenumber=\"285\"><code class=\"lang-csharp\">var streamEvents = new List&lt;ResolvedEvent&gt;();\n\nStreamEventsSlice currentSlice;\nvar nextSliceStart = StreamPosition.Start;\ndo\n{\n    currentSlice =\n    _eventStoreConnection.ReadStreamEventsForward(&quot;myStream&quot;, nextSliceStart,\n                                                  200, false)\n                                                  .Result;\n\n    nextSliceStart = currentSlice.NextEventNumber;\n\n    streamEvents.AddRange(currentSlice.Events);\n} while (!currentSlice.IsEndOfStream);\n</code></pre><div class=\"NOTE\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"287\" sourceendlinenumber=\"287\"><h5>Note</h5><p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"288\" sourceendlinenumber=\"288\">It is unlikely that client code would need to build a list in this manner. It is far more likely that events would be passed into a left fold to derive the state of some object as of a given event.</p>\n</div>\n<h2 id=\"reading-a-stream-backwards\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"290\" sourceendlinenumber=\"290\">Reading a stream backwards</h2>\n<!-- TODO: Moved, check -->\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"294\" sourceendlinenumber=\"294\">The <code>ReadStreamEventsBackwardAsync</code> method reads the requested number of events in the reverse order from that in which they were originally written to the stream from a specified starting point.</p>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"296\" sourceendlinenumber=\"296\">The parameters are:</p>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"298\" sourceendlinenumber=\"324\"><table>\n    <thead>\n        <tr>\n            <th>Parameter</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>string Stream</code></td>\n            <td>The name of the stream to read</td>\n        </tr>\n        <tr>\n            <td><code>long start</code></td>\n            <td>The latest event to read (inclusive). For the end of the stream use the constant <code>StreamPosition.End</code></td>\n        </tr>\n        <tr>\n            <td><code>int count</code></td>\n            <td>The maximum number of events to read in this request (assuming that many exist between the start specified and the start of the stream)</td>\n        </tr>\n        <tr>\n            <td><code>bool&nbsp;resolveLinkTos</code></td>\n            <td>Determines whether any link events encountered in the stream will be resolved. See the discussion on <a href=\"#ResolvedEvent\">Resolved Events</a> for more information on this</td>\n        </tr>\n    </tbody>\n</table>\nacross</p>\n<h2 id=\"reading-all-events\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"325\" sourceendlinenumber=\"325\">Reading all events</h2>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"327\" sourceendlinenumber=\"327\">Event Store allows you to read events across all streams using the <code>ReadAllEventsForwardAsync</code> and <code>ReadAllEventsBackwardsAsync</code> methods. These work in the same way as the regular read methods, but use instance of the global logfile <code>Position</code> to reference events rather than the simple integer stream position described previously.</p>\n<p sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"329\" sourceendlinenumber=\"329\">They also return an <code>AllEventsSlice</code> rather than a <code>StreamEventsSlice</code> which is the same except it uses global <code>Position</code>s rather than stream positions.</p>\n<h3 id=\"example-reading-all-events-forward-from-start-to-end\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"331\" sourceendlinenumber=\"331\">Example: Reading all events forward from start to end</h3>\n<pre sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"333\" sourceendlinenumber=\"348\"><code class=\"lang-csharp\">var allEvents = new List&lt;ResolvedEvent&gt;();\n\nAllEventsSlice currentSlice;\nvar nextSliceStart = Position.Start;\n\ndo\n{\n    currentSlice =\n        connection.ReadAllEventsForwardAsync(nextSliceStart, 200, false).Result;\n\n    nextSliceStart = currentSlice.NextPosition;\n\n    allEvents.AddRange(currentSlice.Events);\n} while (!currentSlice.IsEndOfStream);\n</code></pre>","type":"Conceptual","source":{"remote":{"path":"dotnet-api/reading-events.md","branch":"swagger-docfx","repo":"git@github.com:EventStore/docs.geteventstore.com.git"},"startLine":0,"endLine":0,"isExternal":false},"path":"dotnet-api/reading-events.md","documentation":{"remote":{"path":"dotnet-api/reading-events.md","branch":"swagger-docfx","repo":"git@github.com:EventStore/docs.geteventstore.com.git"},"startLine":0,"endLine":0,"isExternal":false},"_docfxVersion":"2.31.0.0","_systemKeys":["conceptual","type","source","path","documentation","title","rawTitle","wordCount"],"title":"Reading Events","rawTitle":"<h1 id=\"reading-events\" sourcefile=\"dotnet-api/reading-events.md\" sourcestartlinenumber=\"6\" sourceendlinenumber=\"6\">Reading Events</h1>","section":".NET API","version":"4.0.2","wordCount":1222,"_lang":"csharp","_tocPath":"docs/toc.html","_rel":"../../","_path":"docs/dotnet-api/reading-events.html","_key":"dotnet-api/reading-events.md","_tocRel":"../toc.html","_tocKey":"~/toc.md","__global":{"classesInSubtitle":"Classes","structsInSubtitle":"Structs","interfacesInSubtitle":"Interfaces","enumsInSubtitle":"Enums","delegatesInSubtitle":"Delegates","constructorsInSubtitle":"Constructors","fieldsInSubtitle":"Fields","propertiesInSubtitle":"Properties","methodsInSubtitle":"Methods","eventsInSubtitle":"Events","operatorsInSubtitle":"Operators","eiisInSubtitle":"Explicit Interface Implementations","functionsInSubtitle":"Functions","membersInSubtitle":"Members","improveThisDoc":"Improve this Doc","viewSource":"View Source","inheritance":"Inheritance","inheritedMembers":"Inherited Members","namespace":"Namespace","assembly":"Assembly","syntax":"Syntax","overrides":"Overrides","implements":"Implements","remarks":"Remarks","examples":"Examples","seealso":"See Also","declaration":"Declaration","parameters":"Parameters","typeParameters":"Type Parameters","type":"Type","name":"Name","description":"Description","returns":"Returns","fieldValue":"Field Value","propertyValue":"Property Value","eventType":"Event Type","exceptions":"Exceptions","condition":"Condition","extensionMethods":"Extension Methods","note":"<h5>Note</h5>","warning":"<h5>Warning</h5>","tip":"<h5>Tip</h5>","important":"<h5>Important</h5>","caution":"<h5>Caution</h5>","_shared":{}}}