{"conceptual":"\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"3\" sourceendlinenumber=\"3\">You can create projections in one of 2 ways. You can supply them to Event Store directly via the HTTP API, or you can use the administration UI which provides a section for authoring projections.</p>\n<h2 id=\"starting-and-configuring-event-store-for-projections\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"5\" sourceendlinenumber=\"5\">Starting and Configuring Event Store for Projections</h2>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"7\" sourceendlinenumber=\"7\">The following configuration starts Event Store with all the projection modes enabled (user and system defined) and uses an in-memory database which is suitable for development purposes.</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"9\" sourceendlinenumber=\"11\"><code class=\"lang-powershell\">EventStore.ClusterNode.exe --run-projections=all --mem-db\n</code></pre><p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"13\" sourceendlinenumber=\"13\">You should now have an Event Store database up and running with projections enabled. To verify open <em><a href=\"http://localhost:2113\" data-raw-source=\"&lt;http://localhost:2113&gt;\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"13\" sourceendlinenumber=\"13\">http://localhost:2113</a></em> in your browser. To login, use the credentials, <code>username: admin</code> and <code>password: changeit</code>.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Once you are logged into the administration UI, you should see a <em>projections</em> tab at the top and after clicking it, you should see the 4 system projections in a <code>Stopped</code> state.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"17\" sourceendlinenumber=\"17\">You can separately query the state of all the projections using the HTTP API.</p>\n<div class=\"tabGroup\" id=\"tabgroup_z1VCxyd00h\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"19\" sourceendlinenumber=\"47\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_z1VCxyd00h_tabid-1\" role=\"tab\" aria-controls=\"tabpanel_z1VCxyd00h_tabid-1\" data-tab=\"tabid-1\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"19\" sourceendlinenumber=\"19\">Request</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_z1VCxyd00h_tabid-2\" role=\"tab\" aria-controls=\"tabpanel_z1VCxyd00h_tabid-2\" data-tab=\"tabid-2\" tabindex=\"-1\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Response</a>\n</li>\n</ul>\n<section id=\"tabpanel_z1VCxyd00h_tabid-1\" role=\"tabpanel\" data-tab=\"tabid-1\">\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"21\" sourceendlinenumber=\"23\"><code class=\"lang-bash\">curl -i http://localhost:2113/projections/any -H &quot;accept:application/json&quot; | grep -E &#39;effectiveName|status&#39;\n</code></pre></section>\n<section id=\"tabpanel_z1VCxyd00h_tabid-2\" role=\"tabpanel\" data-tab=\"tabid-2\" aria-hidden=\"true\" hidden=\"hidden\">\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"27\" sourceendlinenumber=\"27\">The response is a list of all known projections and useful information about them.</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"29\" sourceendlinenumber=\"45\"><code class=\"lang-json\">&quot;effectiveName&quot;: &quot;$streams&quot;\n&quot;status&quot;: &quot;Stopped&quot;\n&quot;statusUrl&quot;: &quot;http://localhost:2113/projection/$streams&quot;\n\n&quot;effectiveName&quot;: &quot;$stream_by_category&quot;\n&quot;status&quot;: &quot;Stopped&quot;\n&quot;statusUrl&quot;: &quot;http://localhost:2113/projection/$stream_by_category&quot;\n\n&quot;effectiveName&quot;: &quot;$by_category&quot;\n&quot;status&quot;: &quot;Stopped&quot;\n&quot;statusUrl&quot;: &quot;http://localhost:2113/projection/$by_category&quot;\n\n&quot;effectiveName&quot;: &quot;$by_event_type&quot;\n&quot;status&quot;: &quot;Stopped&quot;\n&quot;statusUrl&quot;: &quot;http://localhost:2113/projection/$by_event_type&quot;\n</code></pre></section>\n</div>\n<h2 id=\"setup-sample-data\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"49\" sourceendlinenumber=\"49\">Setup Sample Data</h2>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"51\" sourceendlinenumber=\"51\">The following snippets will provide you with some sample data which we will be using throughout this getting started guide.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"53\" sourceendlinenumber=\"53\">Filename: <em>shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1164.json</em></p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"55\" sourceendlinenumber=\"55\">Contents:</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"57\" sourceendlinenumber=\"80\"><code class=\"lang-json\">[\n    {\n      &quot;eventId&quot;    : &quot;b989fe21-9469-4017-8d71-9820b8dd1164&quot;,\n      &quot;eventType&quot;  : &quot;ItemAdded&quot;,\n      &quot;data&quot;       : {\n         &quot;Description&quot;: &quot;Xbox One S 1TB (Console)&quot;,\n      },\n      &quot;metadata&quot;   : {\n         &quot;TimeStamp&quot;: &quot;2016-12-23T08:00:00.9225401+01:00&quot;\n      }\n    },\n    {\n      &quot;eventId&quot;    : &quot;b989fe21-9469-4017-8d71-9820b8dd1174&quot;,\n      &quot;eventType&quot;  : &quot;ItemAdded&quot;,\n      &quot;data&quot;       : {\n         &quot;Description&quot;: &quot;Gears of War 4&quot;,\n      },\n      &quot;metadata&quot;   : {\n         &quot;TimeStamp&quot;: &quot;2016-12-23T08:05:00.9225401+01:00&quot;\n      }\n    }\n]\n</code></pre><p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"82\" sourceendlinenumber=\"82\">Filename: <em>shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1165.json</em></p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"84\" sourceendlinenumber=\"84\">Contents:</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"86\" sourceendlinenumber=\"109\"><code class=\"lang-json\">[\n    {\n      &quot;eventId&quot;    : &quot;b989fe21-9469-4017-8d71-9820b8dd1165&quot;,\n      &quot;eventType&quot;  : &quot;ItemAdded&quot;,\n      &quot;data&quot;       : {\n         &quot;Description&quot;: &quot;Xbox One S 500GB (Console)&quot;\n      },\n      &quot;metadata&quot;   : {\n         &quot;TimeStamp&quot;: &quot;2016-12-23T09:00:00.9225401+01:00&quot;\n      }\n    },\n    {\n      &quot;eventId&quot;    : &quot;b989fe21-9469-4017-8d71-9820b8dd1175&quot;,\n      &quot;eventType&quot;  : &quot;ItemAdded&quot;,\n      &quot;data&quot;       : {\n         &quot;Description&quot;: &quot;Xbox One Elite Controller&quot;\n      },\n      &quot;metadata&quot;   : {\n         &quot;TimeStamp&quot;: &quot;2016-12-23T09:05:00.9225401+01:00&quot;\n      }\n    }\n]\n</code></pre><p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"111\" sourceendlinenumber=\"111\">Filename: <em>shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1166.json</em></p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"113\" sourceendlinenumber=\"113\">Contents:</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"115\" sourceendlinenumber=\"138\"><code class=\"lang-json\">[\n    {\n      &quot;eventId&quot;    : &quot;b989fe21-9469-4017-8d71-9820b8dd1166&quot;,\n      &quot;eventType&quot;  : &quot;ItemAdded&quot;,\n      &quot;data&quot;       : {\n         &quot;Description&quot;: &quot;Xbox One S Minecraft Edition (Console)&quot;\n      },\n      &quot;metadata&quot;   : {\n         &quot;TimeStamp&quot;: &quot;2016-12-23T10:00:00.9225401+01:00&quot;\n      }\n    },\n    {\n      &quot;eventId&quot;    : &quot;b989fe21-9469-4017-8d71-9820b8dd1176&quot;,\n      &quot;eventType&quot;  : &quot;ItemAdded&quot;,\n      &quot;data&quot;       : {\n         &quot;Description&quot;: &quot;Fifa 2016 (Xbox)&quot;\n      },\n      &quot;metadata&quot;   : {\n         &quot;TimeStamp&quot;: &quot;2016-12-23T10:05:00.9225401+01:00&quot;\n      }\n    }\n]\n</code></pre><p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"140\" sourceendlinenumber=\"140\">Filename: <em>shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167.json</em></p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"142\" sourceendlinenumber=\"142\">Contents:</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"144\" sourceendlinenumber=\"157\"><code class=\"lang-json\">[\n    {\n      &quot;eventId&quot;    : &quot;b989fe21-9469-4017-8d71-9820b8dd1167&quot;,\n      &quot;eventType&quot;  : &quot;ItemAdded&quot;,\n      &quot;data&quot;       : {\n         &quot;Description&quot;: &quot;Xbox One Elite (Console)&quot;\n      },\n      &quot;metadata&quot;   : {\n         &quot;TimeStamp&quot;: &quot;2016-12-23T10:00:00.9225401+01:00&quot;\n      }\n    }\n]\n</code></pre><pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"159\" sourceendlinenumber=\"167\"><code class=\"lang-bash\">curl -i -d @&quot;shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1164.json&quot; &quot;http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1164&quot; -H &quot;Content-Type:application/vnd.eventstore.events+json&quot;\n\ncurl -i -d @&quot;shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1165.json&quot; &quot;http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1165&quot; -H &quot;Content-Type:application/vnd.eventstore.events+json&quot;\n\ncurl -i -d @&quot;shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1166.json&quot; &quot;http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1166&quot; -H &quot;Content-Type:application/vnd.eventstore.events+json&quot;\n\ncurl -i -d @&quot;shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167.json&quot; &quot;http://127.0.0.1:2113/streams/shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1167&quot; -H &quot;Content-Type:application/vnd.eventstore.events+json&quot;\n</code></pre><h2 id=\"writing-your-first-projection\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"169\" sourceendlinenumber=\"169\">Writing your first projection</h2>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"171\" sourceendlinenumber=\"171\">Finally you can get to writing the projection itself, you can find the user defined projection&#39;s API <a href=\"~/projections/user-defined-projections.md\" data-raw-source=\"[here](user-defined-projections.md)\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"171\" sourceendlinenumber=\"171\">here</a>.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"173\" sourceendlinenumber=\"173\">Start with a simple projection that will count the number of XBox One Ss that customers added to their shopping carts.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"175\" sourceendlinenumber=\"175\">A Projection starts with a selector, in this case <code>fromAll()</code>. Another possibility is <code>fromCategory({category}</code> which we will discuss later, but for now, <code>fromAll</code> should do.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"177\" sourceendlinenumber=\"177\">The second part of the projection is a set of filters and there is a special filter called <code>$init</code> that provides the ability to setup some initial state. You want to start the counter from 0 and each time you observe the <code>ItemAdded</code> event for an &#39;Xbox One S&#39; you want to increment this counter.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"179\" sourceendlinenumber=\"179\">Here is the projection so far</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"181\" sourceendlinenumber=\"181\">Filename: <em>xbox-one-s-counter.json</em></p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"183\" sourceendlinenumber=\"183\">Contents:</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"185\" sourceendlinenumber=\"199\"><code class=\"lang-json\">fromAll()\n.when({\n    $init: function(){\n        return {\n            count: 0\n        }\n    },\n    ItemAdded: function(s,e){\n        if(e.body.Description.indexOf(&quot;Xbox One S&quot;) &gt;= 0){\n            s.count += 1;\n        }\n    }\n})\n</code></pre><p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"201\" sourceendlinenumber=\"201\">You can create the projection by calling to the API and providing it with the definition of the projection. Here you make a decision on how to run the projection. You are declaring that you want the projection to start from the beginning and keep running into the future.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"203\" sourceendlinenumber=\"203\">You can find more information about how to interact with projections in the <a href=\"~/projections/api.md\" data-raw-source=\"[API section](api.md)\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"203\" sourceendlinenumber=\"203\">API section</a>.</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"205\" sourceendlinenumber=\"207\"><code class=\"lang-bash\">curl -i --data-binary &quot;@xbox-one-s-counter.json&quot; http://localhost:2113/projections/continuous?name=xbox-one-s-counter%26type=js%26enabled=true%26emit=true%26trackemittedstreams=true -u admin:changeit\n</code></pre><p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"209\" sourceendlinenumber=\"209\">You should have received a &#39;201 Created response&#39; from Event Store, which means that the projection was created successfully. You can confirm that the projection is running by issuing a status request.</p>\n<div class=\"tabGroup\" id=\"tabgroup_z1VCxyd00h-1\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"211\" sourceendlinenumber=\"226\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_z1VCxyd00h-1_tabid-3\" role=\"tab\" aria-controls=\"tabpanel_z1VCxyd00h-1_tabid-3\" data-tab=\"tabid-3\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"211\" sourceendlinenumber=\"211\">Request</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_z1VCxyd00h-1_tabid-4\" role=\"tab\" aria-controls=\"tabpanel_z1VCxyd00h-1_tabid-4\" data-tab=\"tabid-4\" tabindex=\"-1\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"217\" sourceendlinenumber=\"217\">Response</a>\n</li>\n</ul>\n<section id=\"tabpanel_z1VCxyd00h-1_tabid-3\" role=\"tabpanel\" data-tab=\"tabid-3\">\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"213\" sourceendlinenumber=\"215\"><code class=\"lang-bash\">curl -i http://localhost:2113/projection/xbox-one-s-counter | grep status\n</code></pre></section>\n<section id=\"tabpanel_z1VCxyd00h-1_tabid-4\" role=\"tabpanel\" data-tab=\"tabid-4\" aria-hidden=\"true\" hidden=\"hidden\">\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"219\" sourceendlinenumber=\"219\">The response should resemble the following.</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"221\" sourceendlinenumber=\"224\"><code class=\"lang-bash\">&quot;status&quot;: &quot;Running&quot;,\n&quot;statusUrl&quot;: &quot;http://localhost:2113/projection/xbox-one-s-counter&quot;,\n</code></pre></section>\n</div>\n<h2 id=\"querying-for-the-state-of-the-projection\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"228\" sourceendlinenumber=\"228\">Querying for the state of the projection</h2>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"230\" sourceendlinenumber=\"230\">Now the projection is running, you can query the state of the projection. You can query the state of the projection by issuing yet another request. For a projection that has a single state (more on this later), the request should resemble the following.</p>\n<div class=\"tabGroup\" id=\"tabgroup_z1VCxyd00h-2\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"232\" sourceendlinenumber=\"248\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_z1VCxyd00h-2_tabid-5\" role=\"tab\" aria-controls=\"tabpanel_z1VCxyd00h-2_tabid-5\" data-tab=\"tabid-5\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"232\" sourceendlinenumber=\"232\">Request</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_z1VCxyd00h-2_tabid-6\" role=\"tab\" aria-controls=\"tabpanel_z1VCxyd00h-2_tabid-6\" data-tab=\"tabid-6\" tabindex=\"-1\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"238\" sourceendlinenumber=\"238\">Response</a>\n</li>\n</ul>\n<section id=\"tabpanel_z1VCxyd00h-2_tabid-5\" role=\"tabpanel\" data-tab=\"tabid-5\">\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"234\" sourceendlinenumber=\"236\"><code class=\"lang-bash\">curl -i http://localhost:2113/projection/xbox-one-s-counter/state\n</code></pre></section>\n<section id=\"tabpanel_z1VCxyd00h-2_tabid-6\" role=\"tabpanel\" data-tab=\"tabid-6\" aria-hidden=\"true\" hidden=\"hidden\">\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"240\" sourceendlinenumber=\"240\">Which should return the state (JSON by default).</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"242\" sourceendlinenumber=\"246\"><code class=\"lang-json\">{\n  &quot;count&quot;:3\n}\n</code></pre></section>\n</div>\n<h2 id=\"writing-to-streams-from-projections\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"250\" sourceendlinenumber=\"250\">Writing to streams from Projections</h2>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"252\" sourceendlinenumber=\"252\">The above gives you the correct result, but requires you to poll for the state of a projection. What if you wanted to be notified of state updates via subscriptions?</p>\n<h2 id=\"output-state\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"254\" sourceendlinenumber=\"254\">Output State</h2>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"256\" sourceendlinenumber=\"256\">You could configure the projection to output the state to a stream by calling the <code>outputState()</code> method on the projection which by default will produce a <code>$projections-{projection-name}-result</code> stream.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"258\" sourceendlinenumber=\"258\">Filename: <em>xbox-one-s-counter-outputState.json</em></p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"260\" sourceendlinenumber=\"274\"><code class=\"lang-json\">fromAll()\n.when({\n    $init: function(){\n        return {\n            count: 0\n        }\n    },\n    ItemAdded: function(s,e){\n        if(e.body.Description.indexOf(&quot;Xbox One S&quot;) &gt;= 0){\n            s.count += 1;\n        }\n    }\n}).outputState()\n</code></pre><p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"276\" sourceendlinenumber=\"276\">To update the projection, you issue the following request.</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"278\" sourceendlinenumber=\"280\"><code class=\"lang-bash\">curl -i -X PUT --data-binary &quot;@xbox-one-s-counter-outputState.json&quot; http://localhost:2113/projection/xbox-one-s-counter/query?emit=yes -u admin:changeit\n</code></pre><p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"282\" sourceendlinenumber=\"282\">You can now read the events in the result stream by issuing a read request.</p>\n<div class=\"tabGroup\" id=\"tabgroup_z1VCxyd00h-3\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"284\" sourceendlinenumber=\"300\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_z1VCxyd00h-3_tabid-7\" role=\"tab\" aria-controls=\"tabpanel_z1VCxyd00h-3_tabid-7\" data-tab=\"tabid-7\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"284\" sourceendlinenumber=\"284\">Request</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_z1VCxyd00h-3_tabid-8\" role=\"tab\" aria-controls=\"tabpanel_z1VCxyd00h-3_tabid-8\" data-tab=\"tabid-8\" tabindex=\"-1\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"290\" sourceendlinenumber=\"290\">Response</a>\n</li>\n</ul>\n<section id=\"tabpanel_z1VCxyd00h-3_tabid-7\" role=\"tabpanel\" data-tab=\"tabid-7\">\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"286\" sourceendlinenumber=\"288\"><code class=\"lang-bash\">curl -i http://localhost:2113/streams/%24projections-xbox-one-s-counter-result\\?embed\\=body -H &quot;accept:application/json&quot; -u admin:changeit | grep data\n</code></pre></section>\n<section id=\"tabpanel_z1VCxyd00h-3_tabid-8\" role=\"tabpanel\" data-tab=\"tabid-8\" aria-hidden=\"true\" hidden=\"hidden\">\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"292\" sourceendlinenumber=\"292\">The response should resemble the following.</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"294\" sourceendlinenumber=\"298\"><code class=\"lang-json\">&quot;data&quot;: &quot;{\\&quot;count\\&quot;:3}&quot;,\n&quot;data&quot;: &quot;{\\&quot;count\\&quot;:2}&quot;,\n&quot;data&quot;: &quot;{\\&quot;count\\&quot;:1}&quot;,\n</code></pre></section>\n</div>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"302\" sourceendlinenumber=\"302\">You can configure the name of the state stream via the projection options:</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"304\" sourceendlinenumber=\"308\"><code class=\"lang-json\">options({\n  resultStreamName: &quot;xboxes&quot;\n})\n</code></pre><h2 id=\"number-of-items-per-shopping-cart\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"310\" sourceendlinenumber=\"310\">Number of items per shopping cart</h2>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"312\" sourceendlinenumber=\"312\">The above example relied on a global state for the projection, but what if you wanted a simple count of the number of items in the shopping cart per shopping cart.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"314\" sourceendlinenumber=\"314\">There is a built in projection that gives you the ability to select events from a particular list of streams which is the <code>$by_category</code> projection. Enable this projection now.</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"316\" sourceendlinenumber=\"318\"><code class=\"lang-bash\">curl -i -d{} http://localhost:2113/projection/%24by_category/command/enable -u admin:changeit\n</code></pre><p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"320\" sourceendlinenumber=\"320\">The projection will link events from existing streams to new streams by splitting the stream name by a separator. The projection is configurable and you can specify the position of where it needs to split the stream <code>id</code> and provide your own separator.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"322\" sourceendlinenumber=\"322\">For example, by default the category is determined by splitting the stream <code>id</code> by a dash. The category is the first string.</p>\n<table sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"324\" sourceendlinenumber=\"328\">\n<thead>\n<tr>\n<th>Stream Name</th>\n<th>Category</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>shoppingCart-54</td>\n<td>shoppingCart</td>\n</tr>\n<tr>\n<td>shoppingCart-v1-54</td>\n<td>shoppingCart</td>\n</tr>\n<tr>\n<td>shoppingCart</td>\n<td><em>No category as there is no separator</em></td>\n</tr>\n</tbody>\n</table>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"330\" sourceendlinenumber=\"330\">With the projection enabled, you can continue with defining the projection. You want to define a projection that will produce a count per stream for a category but the state needs to be per stream.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"332\" sourceendlinenumber=\"332\">Make use of the built in system projection <code>$by_category</code> that enables the use of the <code>fromCategory</code> API method.</p>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"334\" sourceendlinenumber=\"334\">Filename: <em>shopping-cart-counter.json</em></p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"336\" sourceendlinenumber=\"349\"><code class=\"lang-json\">fromCategory(&#39;shoppingCart&#39;)\n.foreachStream()\n.when({\n    $init: function(){\n        return {\n            count: 0\n        }\n    },\n    ItemAdded: function(s,e){\n        s.count += 1;\n    }\n})\n</code></pre><p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"351\" sourceendlinenumber=\"351\">Once again, you can create the projection by issuing an HTTP request:</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"353\" sourceendlinenumber=\"355\"><code class=\"lang-bash\">curl -i --data-binary &quot;@shopping-cart-counter.json&quot; http://localhost:2113/projections/continuous?name=shopping-cart-item-counter%26type=js%26enabled=true%26emit=true%26trackemittedstreams=true -u admin:changeit\n</code></pre><h2 id=\"querying-for-the-state-of-the-projection-by-partition\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"357\" sourceendlinenumber=\"357\">Querying for the state of the projection by partition</h2>\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"359\" sourceendlinenumber=\"359\">Querying for the state of the projection is different due to the way you have partitioned the projection. You have to specify the partition you are interested in and it&#39;s the name of the stream.</p>\n<div class=\"tabGroup\" id=\"tabgroup_z1VCxyd00h-4\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"361\" sourceendlinenumber=\"377\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_z1VCxyd00h-4_tabid-9\" role=\"tab\" aria-controls=\"tabpanel_z1VCxyd00h-4_tabid-9\" data-tab=\"tabid-9\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"361\" sourceendlinenumber=\"361\">Request</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_z1VCxyd00h-4_tabid-10\" role=\"tab\" aria-controls=\"tabpanel_z1VCxyd00h-4_tabid-10\" data-tab=\"tabid-10\" tabindex=\"-1\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"367\" sourceendlinenumber=\"367\">Response</a>\n</li>\n</ul>\n<section id=\"tabpanel_z1VCxyd00h-4_tabid-9\" role=\"tabpanel\" data-tab=\"tabid-9\">\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"363\" sourceendlinenumber=\"365\"><code class=\"lang-bash\">curl -i http://localhost:2113/projection/shopping-cart-item-counter/state?partition=shoppingCart-b989fe21-9469-4017-8d71-9820b8dd1164\n</code></pre></section>\n<section id=\"tabpanel_z1VCxyd00h-4_tabid-10\" role=\"tabpanel\" data-tab=\"tabid-10\" aria-hidden=\"true\" hidden=\"hidden\">\n<p sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"369\" sourceendlinenumber=\"369\">Which returns the state (JSON by default).</p>\n<pre sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"371\" sourceendlinenumber=\"375\"><code class=\"lang-bash\">{\n  &quot;count&quot;:2\n}\n</code></pre></section>\n</div>\n","type":"Conceptual","source":{"remote":{"path":"projections/getting-started.md","branch":"swagger-docfx","repo":"git@github.com:EventStore/docs.geteventstore.com.git"},"startLine":0,"endLine":0,"isExternal":false},"path":"projections/getting-started.md","documentation":{"remote":{"path":"projections/getting-started.md","branch":"swagger-docfx","repo":"git@github.com:EventStore/docs.geteventstore.com.git"},"startLine":0,"endLine":0,"isExternal":false},"_docfxVersion":"2.31.0.0","_systemKeys":["conceptual","type","source","path","documentation","title","rawTitle","wordCount"],"title":"Getting Started","rawTitle":"<h1 id=\"getting-started\" sourcefile=\"projections/getting-started.md\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"1\">Getting Started</h1>","wordCount":1207,"_lang":"csharp","_tocPath":"docs/toc.html","_rel":"../../","_path":"docs/projections/getting-started.html","_key":"projections/getting-started.md","_tocRel":"../toc.html","_tocKey":"~/toc.md","__global":{"classesInSubtitle":"Classes","structsInSubtitle":"Structs","interfacesInSubtitle":"Interfaces","enumsInSubtitle":"Enums","delegatesInSubtitle":"Delegates","constructorsInSubtitle":"Constructors","fieldsInSubtitle":"Fields","propertiesInSubtitle":"Properties","methodsInSubtitle":"Methods","eventsInSubtitle":"Events","operatorsInSubtitle":"Operators","eiisInSubtitle":"Explicit Interface Implementations","functionsInSubtitle":"Functions","membersInSubtitle":"Members","improveThisDoc":"Improve this Doc","viewSource":"View Source","inheritance":"Inheritance","inheritedMembers":"Inherited Members","namespace":"Namespace","assembly":"Assembly","syntax":"Syntax","overrides":"Overrides","implements":"Implements","remarks":"Remarks","examples":"Examples","seealso":"See Also","declaration":"Declaration","parameters":"Parameters","typeParameters":"Type Parameters","type":"Type","name":"Name","description":"Description","returns":"Returns","fieldValue":"Field Value","propertyValue":"Property Value","eventType":"Event Type","exceptions":"Exceptions","condition":"Condition","extensionMethods":"Extension Methods","note":"<h5>Note</h5>","warning":"<h5>Warning</h5>","tip":"<h5>Tip</h5>","important":"<h5>Important</h5>","caution":"<h5>Caution</h5>","_shared":{}}}