{"conceptual":"\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"2\" sourceendlinenumber=\"2\">This guide will show you how to get started with Event Store using the Atom publishing protocol as the primary interface. It covers installation and basic operations such as writing to a stream, reading from a stream, and subscribing to a stream.</p>\n<div class=\"WARNING\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"4\" sourceendlinenumber=\"4\"><h5>Warning</h5><p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"5\" sourceendlinenumber=\"5\">The described is for development and evaluation of Event Store. It does not describe a production setup.</p>\n</div>\n<h2 id=\"install-and-run\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"7\" sourceendlinenumber=\"7\">Install and Run</h2>\n<div class=\"tabGroup\" id=\"tabgroup_jkCGdkmrsH\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"9\" sourceendlinenumber=\"68\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_jkCGdkmrsH_tabid-1\" role=\"tab\" aria-controls=\"tabpanel_jkCGdkmrsH_tabid-1\" data-tab=\"tabid-1\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"9\" sourceendlinenumber=\"9\">Windows</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_jkCGdkmrsH_tabid-2\" role=\"tab\" aria-controls=\"tabpanel_jkCGdkmrsH_tabid-2\" data-tab=\"tabid-2\" tabindex=\"-1\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Linux</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_jkCGdkmrsH_tabid-3\" role=\"tab\" aria-controls=\"tabpanel_jkCGdkmrsH_tabid-3\" data-tab=\"tabid-3\" tabindex=\"-1\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"60\" sourceendlinenumber=\"60\">Docker</a>\n</li>\n</ul>\n<section id=\"tabpanel_jkCGdkmrsH_tabid-1\" role=\"tabpanel\" data-tab=\"tabid-1\">\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"11\" sourceendlinenumber=\"11\">The prerequisites for Installing on Windows are:</p>\n<ul sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"13\" sourceendlinenumber=\"14\">\n<li sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"13\" sourceendlinenumber=\"13\">NET Framework 4.0+</li>\n<li sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"14\">Windows platform SDK with compilers (v7.1) or Visual C++ installed (Only required for a full build)</li>\n</ul>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"16\" sourceendlinenumber=\"16\">Event Store has Chocolatey packages available that you can install with the following command:</p>\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"18\" sourceendlinenumber=\"20\"><code class=\"lang-powershell\">choco install eventstore-oss\n</code></pre><p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"21\" sourceendlinenumber=\"21\">You can also <a href=\"https://geteventstore.com/downloads\" data-raw-source=\"[download](https://geteventstore.com/downloads)\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"21\" sourceendlinenumber=\"21\">download</a> a binary, unzip the archive and run from the folder location.</p>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"23\" sourceendlinenumber=\"23\">Then with an administrator console run the following command:</p>\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"27\"><code class=\"lang-powershell\">EventStore.ClusterNode.exe --db ./db --log ./logs\n</code></pre><p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"29\" sourceendlinenumber=\"29\">This will start Event Store with the database stored at the path <em>./db</em> and the logs in <em>./logs</em>. You can view further command line arguments in the <a href=\"~/server/index.md\" data-raw-source=\"[server docs](~/server/index.md)\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"29\" sourceendlinenumber=\"29\">server docs</a>.</p>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"31\" sourceendlinenumber=\"31\">Event Store is running in an admin context because it will start a HTTP server through <code>http.sys</code>. For permanent or production instances you will need to provide an ACL such as:</p>\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"33\" sourceendlinenumber=\"35\"><code class=\"lang-powershell\">netsh http add urlacl url=http://+:2113/ user=DOMAIN\\username\n</code></pre></section>\n<section id=\"tabpanel_jkCGdkmrsH_tabid-2\" role=\"tabpanel\" data-tab=\"tabid-2\" aria-hidden=\"true\" hidden=\"hidden\">\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"39\">The prerequisites for Installing on Linux are:</p>\n<ul sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">\n<li sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">Mono 4.6.2</li>\n</ul>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"43\" sourceendlinenumber=\"43\">Event Store has pre-built <a href=\"https://packagecloud.io/EventStore/EventStore-OSS\" data-raw-source=\"[packages available for Debian-based distributions](https://packagecloud.io/EventStore/EventStore-OSS)\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"43\" sourceendlinenumber=\"43\">packages available for Debian-based distributions</a>, <a href=\"https://packagecloud.io/EventStore/EventStore-OSS/install#bash-rpm\" data-raw-source=\"[manual instructions for distributions that use RPM](https://packagecloud.io/EventStore/EventStore-OSS/install#bash-rpm)\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"43\" sourceendlinenumber=\"43\">manual instructions for distributions that use RPM</a>, or you can <a href=\"https://github.com/EventStore/EventStore#linux\" data-raw-source=\"[build from source](https://github.com/EventStore/EventStore#linux)\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"43\" sourceendlinenumber=\"43\">build from source</a>.</p>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"45\" sourceendlinenumber=\"45\">If you installed from a pre-built package, start Event Store with:</p>\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"47\" sourceendlinenumber=\"49\"><code class=\"lang-bash\">sudo service eventstore start\n</code></pre><p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"51\" sourceendlinenumber=\"51\">Or, in all other cases you can run the Event Store binary or use our run-node shell script which exports the environment variable <code>LD_LIBRARY_PATH</code> to include the installation path of Event Store, which is necessary if you are planning to use projections.</p>\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"53\" sourceendlinenumber=\"55\"><code class=\"lang-bash\">./run-node.sh --db ./ESData\n</code></pre><div class=\"NOTE\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"57\" sourceendlinenumber=\"57\"><h5>Note</h5><p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"58\" sourceendlinenumber=\"58\">We recommend that when using Linux you set the &#39;open file limit&#39; to a high number. The precise value depends on your usecase, but at miniumum, between <code>30,000</code> and <code>60,000</code>.</p>\n</div>\n</section>\n<section id=\"tabpanel_jkCGdkmrsH_tabid-3\" role=\"tabpanel\" data-tab=\"tabid-3\" aria-hidden=\"true\" hidden=\"hidden\">\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"62\" sourceendlinenumber=\"62\">Event Store has <a href=\"https://hub.docker.com/r/eventstore/eventstore/\" data-raw-source=\"[a Docker image](https://hub.docker.com/r/eventstore/eventstore/)\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"62\" sourceendlinenumber=\"62\">a Docker image</a> available for any platform that supports Docker:</p>\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"64\" sourceendlinenumber=\"66\"><code class=\"lang-bash\">docker run --name eventstore-node -it -p 2113:2113 -p 1113:1113 eventstore/eventstore\n</code></pre></section>\n</div>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"70\" sourceendlinenumber=\"70\">Event Store should now be running at <a href=\"http://127.0.0.1:2113/\" data-raw-source=\"&lt;http://127.0.0.1:2113/&gt;\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"70\" sourceendlinenumber=\"70\">http://127.0.0.1:2113/</a> to see the admin console. The console will ask for a username and password. The defaults are <code>admin:changeit</code>.</p>\n<h2 id=\"writing-events-to-an-event-stream\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"72\" sourceendlinenumber=\"72\">Writing Events to an Event Stream</h2>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"74\" sourceendlinenumber=\"74\">Event Store operates on a concept of Event Streams, and the first operation we will look at is how to write to a stream. If you are Event Sourcing a domain model a stream equates to an aggregate function. Event Store can handle hundreds of millions of streams, create as many as you need.</p>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"76\" sourceendlinenumber=\"76\">To begin, open a text editor, copy and paste the following event definition, and save it as <em>event.txt</em>.</p>\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"78\" sourceendlinenumber=\"89\"><code class=\"lang-json\">[\n  {\n    &quot;eventId&quot;: &quot;fbf4a1a1-b4a3-4dfe-a01f-ec52c34e16e4&quot;,\n    &quot;eventType&quot;: &quot;event-type&quot;,\n    &quot;data&quot;: {\n\n      &quot;a&quot;: &quot;1&quot;\n    }\n  }\n]\n</code></pre><p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"91\" sourceendlinenumber=\"91\">To write the event to a stream, issue the following cURL command.</p>\n<div class=\"tabGroup\" id=\"tabgroup_jkCGdkmrsH-1\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"93\" sourceendlinenumber=\"114\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_jkCGdkmrsH-1_tabid-4\" role=\"tab\" aria-controls=\"tabpanel_jkCGdkmrsH-1_tabid-4\" data-tab=\"tabid-4\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"93\" sourceendlinenumber=\"93\">Request</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_jkCGdkmrsH-1_tabid-5\" role=\"tab\" aria-controls=\"tabpanel_jkCGdkmrsH-1_tabid-5\" data-tab=\"tabid-5\" tabindex=\"-1\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"99\" sourceendlinenumber=\"99\">Response</a>\n</li>\n</ul>\n<section id=\"tabpanel_jkCGdkmrsH-1_tabid-4\" role=\"tabpanel\" data-tab=\"tabid-4\">\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"95\" sourceendlinenumber=\"97\"><code class=\"lang-shell\">curl -i -d @event.txt &quot;http://127.0.0.1:2113/streams/newstream&quot; -H &quot;Content-Type:application/vnd.eventstore.events+json&quot;\n</code></pre></section>\n<section id=\"tabpanel_jkCGdkmrsH-1_tabid-5\" role=\"tabpanel\" data-tab=\"tabid-5\" aria-hidden=\"true\" hidden=\"hidden\">\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"101\" sourceendlinenumber=\"112\"><code class=\"lang-http\">HTTP/1.1 201 Created\nAccess-Control-Allow-Methods: POST, DELETE, GET, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER\nAccess-Control-Allow-Origin: *\nLocation: http://127.0.0.1:2113/streams/newstream/0\nContent-Type: text/plain; charset: utf-8\nServer: Mono-HTTPAPI/1.0\nDate: Fri, 28 Jun 2013 12:17:59 GMT\nContent-Length: 0\nKeep-Alive: timeout=15,max=100\n</code></pre></section>\n</div>\n<div class=\"NOTE\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"116\" sourceendlinenumber=\"116\"><h5>Note</h5><p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"117\" sourceendlinenumber=\"117\">You can also post events as XML, by changing the <code>Content-Type</code> header to <code>XML</code>.</p>\n</div>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"119\" sourceendlinenumber=\"119\">Open the UI after this command to the <em>Stream Browser</em> tab and you will see the stream you created. If you post to a stream that doesn’t exist, Event Store will create it. You can click it to view an HTML representation of your stream.</p>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"121\" sourceendlinenumber=\"121\">You can also setup <a href=\"~/server/access-control-lists.md\" data-raw-source=\"[Access Control Lists](~/server/access-control-lists.md)\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"121\" sourceendlinenumber=\"121\">Access Control Lists</a> on your streams by changing the metadata of the stream.</p>\n<h2 id=\"reading-from-a-stream\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"123\" sourceendlinenumber=\"123\">Reading From a Stream</h2>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"125\" sourceendlinenumber=\"125\">Event Store exposes all streams as <a href=\"http://tools.ietf.org/html/rfc4287\" data-raw-source=\"[atom feeds](http://tools.ietf.org/html/rfc4287)\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"125\" sourceendlinenumber=\"125\">atom feeds</a>, and you can read data from the stream by navigating to the <em>head</em> URI of the stream <a href=\"http://127.0.0.1:2113/streams/newstream\" data-raw-source=\"&lt;http://127.0.0.1:2113/streams/newstream&gt;\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"125\" sourceendlinenumber=\"125\">http://127.0.0.1:2113/streams/newstream</a> with cURL.</p>\n<div class=\"tabGroup\" id=\"tabgroup_jkCGdkmrsH-2\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"127\" sourceendlinenumber=\"203\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_jkCGdkmrsH-2_tabid-6\" role=\"tab\" aria-controls=\"tabpanel_jkCGdkmrsH-2_tabid-6\" data-tab=\"tabid-6\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"127\" sourceendlinenumber=\"127\">Request</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_jkCGdkmrsH-2_tabid-7\" role=\"tab\" aria-controls=\"tabpanel_jkCGdkmrsH-2_tabid-7\" data-tab=\"tabid-7\" tabindex=\"-1\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"133\" sourceendlinenumber=\"133\">Response</a>\n</li>\n</ul>\n<section id=\"tabpanel_jkCGdkmrsH-2_tabid-6\" role=\"tabpanel\" data-tab=\"tabid-6\">\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"129\" sourceendlinenumber=\"131\"><code class=\"lang-shell\">curl -i -H &quot;Accept:application/vnd.eventstore.atom+json&quot; &quot;http://127.0.0.1:2113/streams/newstream&quot;\n</code></pre></section>\n<section id=\"tabpanel_jkCGdkmrsH-2_tabid-7\" role=\"tabpanel\" data-tab=\"tabid-7\" aria-hidden=\"true\" hidden=\"hidden\">\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"135\" sourceendlinenumber=\"201\"><code class=\"lang-http\">HTTP/1.1 200 OK\nAccess-Control-Allow-Methods: POST, DELETE, GET, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, X-Requested-With, X-Forwarded-Host, X-Forwarded-Prefix, X-PINGOTHER, Authorization, ES-LongPoll, ES-ExpectedVersion, ES-EventId, ES-EventType, ES-RequiresMaster, ES-HardDelete, ES-ResolveLinkTos\nAccess-Control-Allow-Origin: *\nAccess-Control-Expose-Headers: Location, ES-Position, ES-CurrentVersion\nCache-Control: max-age=0, no-cache, must-revalidate\nVary: Accept\nETag: &quot;0;-2060438500&quot;\nContent-Type: application/vnd.eventstore.atom+json; charset=utf-8\nServer: Mono-HTTPAPI/1.0\nDate: Fri, 15 Dec 2017 12:23:23 GMT\nContent-Length: 1262\nKeep-Alive: timeout=15,max=100\n\n{\n  &quot;title&quot;: &quot;Event stream &#39;newstream&#39;&quot;,\n  &quot;id&quot;: &quot;http://127.0.0.1:2113/streams/newstream&quot;,\n  &quot;updated&quot;: &quot;2017-12-15T12:19:32.021776Z&quot;,\n  &quot;streamId&quot;: &quot;newstream&quot;,\n  &quot;author&quot;: {\n    &quot;name&quot;: &quot;EventStore&quot;\n  },\n  &quot;headOfStream&quot;: true,\n  &quot;selfUrl&quot;: &quot;http://127.0.0.1:2113/streams/newstream&quot;,\n  &quot;eTag&quot;: &quot;0;-2060438500&quot;,\n  &quot;links&quot;: [\n    {\n      &quot;uri&quot;: &quot;http://127.0.0.1:2113/streams/newstream&quot;,\n      &quot;relation&quot;: &quot;self&quot;\n    },\n    {\n      &quot;uri&quot;: &quot;http://127.0.0.1:2113/streams/newstream/head/backward/20&quot;,\n      &quot;relation&quot;: &quot;first&quot;\n    },\n    {\n      &quot;uri&quot;: &quot;http://127.0.0.1:2113/streams/newstream/1/forward/20&quot;,\n      &quot;relation&quot;: &quot;previous&quot;\n    },\n    {\n      &quot;uri&quot;: &quot;http://127.0.0.1:2113/streams/newstream/metadata&quot;,\n      &quot;relation&quot;: &quot;metadata&quot;\n    }\n  ],\n  &quot;entries&quot;: [\n    {\n      &quot;title&quot;: &quot;0@newstream&quot;,\n      &quot;id&quot;: &quot;http://127.0.0.1:2113/streams/newstream/0&quot;,\n      &quot;updated&quot;: &quot;2017-12-15T12:19:32.021776Z&quot;,\n      &quot;author&quot;: {\n        &quot;name&quot;: &quot;EventStore&quot;\n      },\n      &quot;summary&quot;: &quot;event-type&quot;,\n      &quot;links&quot;: [\n        {\n          &quot;uri&quot;: &quot;http://127.0.0.1:2113/streams/newstream/0&quot;,\n          &quot;relation&quot;: &quot;edit&quot;\n        },\n        {\n          &quot;uri&quot;: &quot;http://127.0.0.1:2113/streams/newstream/0&quot;,\n          &quot;relation&quot;: &quot;alternate&quot;\n        }\n      ]\n    }\n  ]\n}\n</code></pre></section>\n</div>\n<div class=\"NOTE\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"205\" sourceendlinenumber=\"205\"><h5>Note</h5><p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"206\" sourceendlinenumber=\"206\">This example uses cURL, but you can read Atom feeds with a wide variety of applications and languages.</p>\n</div>\n<div class=\"NOTE\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"208\" sourceendlinenumber=\"208\"><h5>Note</h5><p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"209\" sourceendlinenumber=\"209\">This command asked Event Store to return the feed in JSON format, you can also use <code>Accept:application/atom+xml</code> if you prefer XML.</p>\n</div>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"211\" sourceendlinenumber=\"211\">The feed has a single item inside of it, the one you just posted. You can then get the event by issuing a <code>GET</code> to the <code>alternate</code> URI value.</p>\n<div class=\"tabGroup\" id=\"tabgroup_jkCGdkmrsH-3\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"213\" sourceendlinenumber=\"239\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_jkCGdkmrsH-3_tabid-8\" role=\"tab\" aria-controls=\"tabpanel_jkCGdkmrsH-3_tabid-8\" data-tab=\"tabid-8\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"213\" sourceendlinenumber=\"213\">Request</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_jkCGdkmrsH-3_tabid-9\" role=\"tab\" aria-controls=\"tabpanel_jkCGdkmrsH-3_tabid-9\" data-tab=\"tabid-9\" tabindex=\"-1\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"219\" sourceendlinenumber=\"219\">Response</a>\n</li>\n</ul>\n<section id=\"tabpanel_jkCGdkmrsH-3_tabid-8\" role=\"tabpanel\" data-tab=\"tabid-8\">\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"215\" sourceendlinenumber=\"217\"><code class=\"lang-shell\">curl -i http://127.0.0.1:2113/streams/newstream/0 -H &quot;Accept: application/json&quot;\n</code></pre></section>\n<section id=\"tabpanel_jkCGdkmrsH-3_tabid-9\" role=\"tabpanel\" data-tab=\"tabid-9\" aria-hidden=\"true\" hidden=\"hidden\">\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"221\" sourceendlinenumber=\"237\"><code class=\"lang-http\">HTTP/1.1 200 OK\nAccess-Control-Allow-Methods: GET, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, X-Requested-With, X-PINGOTHER\nAccess-Control-Allow-Origin: *\nCache-Control: max-age=31536000, public\nVary: Accept\nContent-Type: application/json; charset: utf-8\nServer: Mono-HTTPAPI/1.0\nDate: Wed, 03 Jul 2013 11:09:12 GMT\nContent-Length: 14\nKeep-Alive: timeout=15,max=100\n\n{\n  &quot;a&quot;: &quot;1&quot;\n}\n</code></pre></section>\n</div>\n<div class=\"NOTE\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"241\" sourceendlinenumber=\"241\"><h5>Note</h5><p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"242\" sourceendlinenumber=\"242\">You can also use <code>Accept: text/xml</code> if you prefer XML.</p>\n</div>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"244\" sourceendlinenumber=\"244\">To read a single page feed, you request the feed and then iterate through the event links by executing <code>GET</code> requests. This may feel inefficient at first but remember the event URIs and most of the page URIs are infinitely cachable.</p>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"246\" sourceendlinenumber=\"246\">You can also <code>GET</code> the events in the feed itself if by using <code>?embed=body</code> in the request. You can find further information on this <a href=\"~/http-api/reading-streams.md\" data-raw-source=\"[here](~/http-api/reading-streams.md)\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"246\" sourceendlinenumber=\"246\">here</a>.</p>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"248\" sourceendlinenumber=\"248\">Sometimes your feed may span more than one atom page, and you will need to paginate through the feed. You do this by following the relation links in the feed. To read a feed from the beginning to the end you would go to the <em>last</em> link and then continue to read the <em>previous</em> page. You can also do more of a twitter style follow and start from now and take the last say 50 to display by using <em>first</em> then <em>next</em>.</p>\n<!-- TODO: Add an example -->\n<h2 id=\"subscribing-to-stream-to-receive-updates\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"252\" sourceendlinenumber=\"252\">Subscribing to Stream to Receive Updates</h2>\n<p sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"254\" sourceendlinenumber=\"254\">Another common operation is to listen to a stream for changes. This works the same way as paging through an Atom feed. As new events arrive, new <em>previous</em> links are created and you can continue following them. The example below is in C# and includes both paging and subscribing over time. If you wanted to provide an <em>at least once</em> assurance with the following code, save the last URI you received.</p>\n<!-- TODO: Test the below and how do you set them up? -->\n<div class=\"tabGroup\" id=\"tabgroup_jkCGdkmrsH-4\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"258\" sourceendlinenumber=\"727\">\n<ul role=\"tablist\">\n<li role=\"presentation\">\n<a href=\"#tabpanel_jkCGdkmrsH-4_tabid-10\" role=\"tab\" aria-controls=\"tabpanel_jkCGdkmrsH-4_tabid-10\" data-tab=\"tabid-10\" tabindex=\"0\" aria-selected=\"true\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"258\" sourceendlinenumber=\"258\">C#</a>\n</li>\n<li role=\"presentation\">\n<a href=\"#tabpanel_jkCGdkmrsH-4_tabid-11\" role=\"tab\" aria-controls=\"tabpanel_jkCGdkmrsH-4_tabid-11\" data-tab=\"tabid-11\" tabindex=\"-1\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"392\" sourceendlinenumber=\"392\">JavaScript</a>\n</li>\n</ul>\n<section id=\"tabpanel_jkCGdkmrsH-4_tabid-10\" role=\"tabpanel\" data-tab=\"tabid-10\">\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"260\" sourceendlinenumber=\"390\"><code class=\"lang-csharp\">using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.ServiceModel.Syndication; // reference &quot;System.ServiceModel&quot;\nusing System.Threading;\nusing System.Xml;\n\nnamespace AtomPoller\n{\n    class Program\n    {\n        private static SyndicationLink GetNamedLink(IEnumerable&lt;SyndicationLink&gt; links, string name)\n        {\n            return links.FirstOrDefault(link =&gt; link.RelationshipType == name);\n        }\n        static Uri GetLast(Uri head)\n        {\n            var request = (HttpWebRequest)WebRequest.Create(head);\n            request.Credentials = new NetworkCredential(&quot;admin&quot;, &quot;changeit&quot;);\n            request.Accept = &quot;application/atom+xml&quot;;\n            try\n            {\n                using (var response = (HttpWebResponse) request.GetResponse())\n                {\n                    if (response.StatusCode == HttpStatusCode.NotFound)\n                        return null;\n                    using (var xmlreader = XmlReader.Create(response.GetResponseStream()))\n                    {\n                        var feed = SyndicationFeed.Load(xmlreader);\n                        var last = GetNamedLink(feed.Links, &quot;last&quot;);\n                        return (last != null) ? last.Uri : GetNamedLink(feed.Links, &quot;self&quot;).Uri;\n                    }\n                }\n            }\n            catch(WebException ex)\n            {\n                if (((HttpWebResponse) ex.Response).StatusCode == HttpStatusCode.NotFound) return null;\n                throw;\n            }\n        }\n\n        private static void ProcessItem(SyndicationItem item)\n        {\n            Console.WriteLine(item.Title.Text);\n            //get events\n            var request = (HttpWebRequest)WebRequest.Create(GetNamedLink(item.Links, &quot;alternate&quot;).Uri);\n            request.Credentials = new NetworkCredential(&quot;admin&quot;, &quot;changeit&quot;);\n            request.Accept = &quot;application/json&quot;;\n            using (var response = request.GetResponse())\n            {\n                var streamReader = new StreamReader(response.GetResponseStream());\n                Console.WriteLine(streamReader.ReadToEnd());\n            }\n        }\n\n        private static Uri ReadPrevious(Uri uri)\n        {\n            var request = (HttpWebRequest)WebRequest.Create(uri);\n            request.Credentials = new NetworkCredential(&quot;admin&quot;, &quot;changeit&quot;);\n            request.Accept = &quot;application/atom+xml&quot;;\n            using(var response = request.GetResponse())\n            {\n                using(var xmlreader = XmlReader.Create(response.GetResponseStream()))\n                {\n                    var feed = SyndicationFeed.Load(xmlreader);\n                    foreach (var item in feed.Items.Reverse())\n                    {\n                        ProcessItem(item);\n                    }\n                    var prev = GetNamedLink(feed.Links, &quot;previous&quot;);\n                    return prev == null ? uri : prev.Uri;\n                }\n            }\n        }\n\n        private static void PostMessage()\n        {\n            var message = &quot;[{&#39;eventType&#39;:&#39;MyFirstEvent&#39;, &#39;eventId&#39;:&#39;&quot;\n                + Guid.NewGuid() + &quot;&#39;, &#39;data&#39;:{&#39;name&#39;:&#39;hello world!&#39;, &#39;number&#39;:&quot;\n                + new Random().Next() + &quot;}}]&quot;;\n            var request = WebRequest.Create(&quot;http://127.0.0.1:2113/streams/yourstream&quot;);\n            request.Method = &quot;POST&quot;;\n            request.ContentType = &quot;application/vnd.eventstore.events+json&quot;;\n            request.ContentLength = message.Length;\n            using(var sw= new StreamWriter(request.GetRequestStream()))\n            {\n                sw.Write(message);\n            }\n            using(var response = request.GetResponse())\n            {\n                response.Close();\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            var timer = new Timer(o =&gt; PostMessage(), null, 1000, 1000);\n            Uri last = null;\n            Console.WriteLine(&quot;Press any key to exit.&quot;);\n            var stop = false;\n            while (last == null &amp;&amp; !stop)\n            {\n                last = GetLast(new Uri(&quot;http://127.0.0.1:2113/streams/yourstream&quot;));\n                if(last == null) Thread.Sleep(1000);\n                if (Console.KeyAvailable)\n                {\n                    stop = true;\n                }\n            }\n\n            while(!stop)\n            {\n                var current = ReadPrevious(last);\n                if(last == current)\n                {\n                    Thread.Sleep(1000);\n                }\n                last = current;\n                if(Console.KeyAvailable)\n                {\n                    stop = true;\n                }\n            }\n        }\n    }\n\n}\n</code></pre></section>\n<section id=\"tabpanel_jkCGdkmrsH-4_tabid-11\" role=\"tabpanel\" data-tab=\"tabid-11\" aria-hidden=\"true\" hidden=\"hidden\">\n<pre sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"394\" sourceendlinenumber=\"725\"><code class=\"lang-javascript\">    if (!window.es) { window.es = {}; };\n    es.projection = function (settings) {\n\n        var projectionBody = settings.body;\n        var onStateUpdate = settings.onStateUpdate || function () { };\n        var showError = settings.showError || function () { };\n        var hideError = settings.hideError || function () { };\n\n        var currentTimeout = null;\n        var currentAjaxes = null;\n        var category = null;\n\n        return {\n            start: startProjection,\n            stop: stopProjection\n        };\n\n        function startProjection() {\n\n            stopProjection();\n            var processor = $initialize_hosted_projections();\n            projectionBody();\n            processor.initialize();\n\n            var sources = JSON.parse(processor.get_sources());\n            if (sources.all_streams\n                || (sources.categories != null &amp;&amp; sources.categories.length &gt; 1)\n                || (sources.streams != null &amp;&amp; sources.streams.length &gt; 1)) {\n                throw &quot;Unsupported projection source to run in the web browser&quot;;\n            }\n\n            if (sources.categories != null &amp;&amp; sources.categories.length == 1) {\n                category = sources.categories[0];\n                startPolling(&quot;$ce-&quot; + category, process_event);\n            } else {\n                category = null;\n                startPolling(sources.streams[0], process_event);\n            }\n\n            function process_event(event) {\n                var parsedEvent = event;\n\n                processor.process_event(parsedEvent.data,\n                                parsedEvent.eventStreamId,\n                                parsedEvent.eventType,\n                                category,\n                                parsedEvent.eventNumber,\n                                parsedEvent.metadata);\n                var stateStr = processor.get_state();\n                var stateObj = JSON.parse(stateStr);\n\n                onStateUpdate(stateObj, stateStr);\n            }\n        };\n\n        function stopProjection() {\n            if (currentTimeout !== null)\n                clearTimeout(currentTimeout);\n            if (currentAjaxes !== null) {\n                for (var i = 0, l = currentAjaxes.length; i &lt; l; i++) {\n                    currentAjaxes[i].abort();\n                }\n            }\n\n            currentAjaxes = null;\n            currentTimeout = null;\n        };\n\n        function startPolling(streamId, callback) {\n\n            var firstPageUrl = &#39;/streams/&#39; + encodeURIComponent(streamId);\n            var lastProcessedPageUrl = null;\n            var lastProcessedEntry = null;\n\n            // not used yet - when something fails we just retry\n            var defaultFail = function(a, b, c) { alert(&#39;Failed!&#39;); };\n\n            readAll(null, null);\n\n            function readAll(fromPageUrl, fromEntry) {\n\n                lastProcessedPageUrl = fromPageUrl;\n                lastProcessedEntry = fromEntry;\n\n                readFirstPage({\n                    pageRead: pageRead,\n                    noEntries: noEntries,\n                    fail: defaultFail\n                });\n\n                function pageRead(firstPageUrl, lastEntry) {\n\n                    // check for end of stream\n                    if (lastProcessedEntry !== null &amp;&amp; Entry.isNewerOrSame(lastProcessedEntry, lastEntry)) {\n                        delayedReadAll(lastProcessedPageUrl, lastProcessedEntry);\n                        return;\n                    }\n\n                    readRange({\n                        page: fromPageUrl || firstPageUrl,\n                        from: fromEntry || null,\n                        to: lastEntry,\n                        processEvent: callback,\n                        endOfStream: delayedReadAll,\n                        success: function (lastReadPageUrl, lastReadEntry) { readAll(lastReadPageUrl, lastReadEntry); },\n                        fail: defaultFail\n                    });\n                }\n\n                function noEntries() {\n                    delayedReadAll(lastProcessedPageUrl, lastProcessedEntry);\n                }\n\n                function delayedReadAll(page, entry) {\n                    setTimeout(function () { readAll(page, entry); }, 1000);\n                }\n            }\n\n            function readFirstPage(sets) {\n\n                var pageRead = sets.pageRead;\n                var noEntries = sets.noEntries;\n                var fail = sets.fail;\n\n                $.ajax(firstPageUrl, {\n                    headers: {\n                        &#39;Accept&#39;: &#39;application/json&#39;\n                    },\n                    success: function (page) {\n                        if (page.entries.length === 0) {\n                            noEntries();\n                        }\n                        var lastEntry = page.entries[0];\n                        var lastPage = $.grep(page.links, function (link) { return link.relation === &#39;last&#39;; })[0].uri;\n                        pageRead(lastPage, lastEntry);\n                    },\n                    error: function (jqXhr, status, error) {\n                        setTimeout(function () { readFirstPage(sets); }, 1000);\n                        //fail.apply(window, arguments);\n                    }\n                });\n            }\n\n            function readRange(sets) {\n\n                var page = sets.page;\n                var from = sets.from;\n                var to = sets.to;\n                var processEvent = sets.processEvent;\n                var success = sets.success;\n                var fail = sets.fail;\n\n                readByPages(page);\n\n                function readByPages(fromPage) {\n                    readPage({\n                        url: fromPage,\n                        lowerBound: from,\n                        upperBound: to,\n                        processEvent: processEvent,\n                        onPageRead: function (nextPage) {\n                            readByPages(nextPage);\n                        },\n                        onUpperBound: function (lastReadPageUrl, lastReadEntry) {\n                            success(lastReadPageUrl, lastReadEntry);\n                        },\n                        fail: fail\n                    });\n                }\n            }\n\n            function readPage(sets) {\n\n                var pageUrl = sets.url;\n                var fromEntry = sets.lowerBound;\n                var toEntry = sets.upperBound;\n                var processEvent = sets.processEvent;\n                var onPageRead = sets.onPageRead;\n                var onUpperBound = sets.onUpperBound;\n                var fail = sets.fail;\n\n                $.ajax(pageUrl, {\n                    headers: {\n                        &#39;Accept&#39;: &#39;application/json&#39;\n                    },\n                    success: function (page) {\n                        var nextPage = $.grep(page.links, function (link) { return link.relation === &#39;previous&#39;; })[0].uri;\n                        var entries = $.grep(page.entries, function (entry) {\n                            // if we&#39;ve read more entries then we were asked to - it&#39;s ok - just set lastEntry correctly\n                            return fromEntry === null || Entry.isNewer(entry, fromEntry);\n                        });\n                        var onEntriesRead = null;\n\n                        if (Entry.isOnPage(pageUrl, toEntry)) {\n\n                            // setting LastEntry as null is ok - readAll will just continue reading from beginning of page. And as deleted events won&#39;t appear again - no duplicates will be processed\n\n                            if (entries.length === 0) {\n                                onUpperBound(pageUrl, toEntry);\n                                return;\n                            }\n\n                            var lastEntry = Entry.max(entries);\n                            onEntriesRead = function () { onUpperBound(pageUrl, lastEntry); };\n                        } else {\n                            onEntriesRead = function () { onPageRead(nextPage); };\n                        }\n\n                        if (entries.length === 0) {\n                            onPageRead(nextPage); // probably was deleted by maxAge/maxCount\n                            return;\n                        }\n\n                        getEvents(entries, processEvent, onEntriesRead);\n                    },\n                    error: function () {\n                        setTimeout(function () { readPage(sets); }, 1000);\n                    }\n                });\n\n\n\n                function getEvents(entries, processEvent, onFinish) {\n\n                    var eventsUrls = $.map(entries, function (entry) {\n                        var jsonLink = $.grep(entry.links, function (link) { return link.type === &#39;application/json&#39;; })[0].uri;\n                        return jsonLink;\n                    });\n\n                    var eventsUrlsCount = eventsUrls.length;\n                    var processedEventUrlsCount = 0;\n                    var receivedEvents = [];\n\n                    currentAjaxes = [];\n\n                    for (var i = 0; i &lt; eventsUrlsCount; i++) {\n                        var url = eventsUrls[i];\n                        var ajax = $.ajax(url, {\n                            headers: {\n                                &quot;Accept&quot;: &quot;application/json&quot;\n                            },\n                            dataType: &#39;json&#39;,\n                            success: successFeed,\n                            error: errorFeed\n                        });\n                        currentAjaxes.push(ajax);\n                    }\n\n                    function successFeed(data) {\n                        receivedEvents.push(data);\n                        processBatchItem();\n                    }\n\n                    function errorFeed(jqXHR, status, error) {\n                        if (jqXHR.responseCode === 404) {\n                            // do nothing. entry may have been erased by maxAge/maxCount\n                            processBatchItem();\n                        } else {\n                            // throw &#39;TODO: consider what to do if server is down or busy&#39;\n                        }\n                    }\n\n                    function processBatchItem() {\n                        processedEventUrlsCount++;\n\n                        if (processedEventUrlsCount === eventsUrlsCount) {\n                            currentAjaxes = []; // no easy way to remove ajaxes from array when they arrive, so just remove all when batch done\n\n                            var successfullReads = receivedEvents.length;\n                            // can&#39;t do much about unsuccessfull reads :\\\n\n                            processReceivedEvents(receivedEvents);\n                            receivedEvents = null;\n\n                            onFinish();\n                        }\n                    }\n\n                    function processReceivedEvents(events) {\n                        events.sort(function (a, b) {\n                            return a.eventNumber - b.eventNumber;\n                        });\n\n                        for (var j = 0, l = events.length; j &lt; l; j++) {\n                            processEvent(events[j]);\n                        }\n                    }\n                }\n            }\n\n            var Entry = {};\n            Entry.isNewer = function (entry1, entry2) {\n                return Entry.compare(entry1, entry2) &gt; 0;\n            };\n            Entry.isNewerOrSame = function (entry1, entry2) {\n                return Entry.compare(entry1, entry2) &gt;= 0;\n            };\n            Entry.isOlderOrSame = function (entry1, entry2) {\n                return Entry.compare(entry1, entry2) &lt;= 0;\n            };\n            Entry.compare = function (entry1, entry2) {\n                return Entry.getId(entry1) - Entry.getId(entry2);\n            };\n            Entry.getId = function (entry) {\n                var strId = entry.id.substring(entry.id.lastIndexOf(&quot;/&quot;) + 1, entry.id.length);\n                return parseInt(strId);\n            };\n            Entry.isOnPage = function (pageUrl, entry) {\n                var entryId = Entry.getId(entry);\n\n                // example: http://127.0.0.1:2114/streams/$stats-127.0.0.1:2114/range/39/20\n                var urlParts = pageUrl.split(&#39;/&#39;);\n                var start = parseInt(urlParts[urlParts.length - 2]); // before last\n                var backwardCount = parseInt(urlParts[urlParts.length - 1]); // last\n\n                return entryId &gt; start - backwardCount &amp;&amp; entryId &lt;= start;\n            };\n            Entry.max = function (array) {\n                if (array.length === 0)\n                    throw &#39;Cannot get max element in empty array&#39;;\n                var res = array[0];\n                for (var i = 1, l = array.length; i &lt; l; i++) {\n                    if (Entry.compare(array[i], res) &gt; 0) {\n                        res = array[i];\n                    }\n                }\n                return res;\n            };\n        }\n    };\n</code></pre></section>\n</div>\n","type":"Conceptual","source":{"remote":{"path":"introduction/index.md","branch":"swagger-docfx","repo":"git@github.com:EventStore/docs.geteventstore.com.git"},"startLine":0,"endLine":0,"isExternal":false},"path":"introduction/index.md","documentation":{"remote":{"path":"introduction/index.md","branch":"swagger-docfx","repo":"git@github.com:EventStore/docs.geteventstore.com.git"},"startLine":0,"endLine":0,"isExternal":false},"_docfxVersion":"2.31.0.0","_systemKeys":["conceptual","type","source","path","documentation","title","rawTitle","wordCount"],"title":"Getting Started","rawTitle":"<h1 id=\"getting-started\" sourcefile=\"introduction/index.md\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"1\">Getting Started</h1>","wordCount":2445,"_lang":"csharp","_tocPath":"docs/toc.html","_rel":"../../","_path":"docs/introduction/index.html","_key":"introduction/index.md","_tocRel":"../toc.html","_tocKey":"~/toc.md","__global":{"classesInSubtitle":"Classes","structsInSubtitle":"Structs","interfacesInSubtitle":"Interfaces","enumsInSubtitle":"Enums","delegatesInSubtitle":"Delegates","constructorsInSubtitle":"Constructors","fieldsInSubtitle":"Fields","propertiesInSubtitle":"Properties","methodsInSubtitle":"Methods","eventsInSubtitle":"Events","operatorsInSubtitle":"Operators","eiisInSubtitle":"Explicit Interface Implementations","functionsInSubtitle":"Functions","membersInSubtitle":"Members","improveThisDoc":"Improve this Doc","viewSource":"View Source","inheritance":"Inheritance","inheritedMembers":"Inherited Members","namespace":"Namespace","assembly":"Assembly","syntax":"Syntax","overrides":"Overrides","implements":"Implements","remarks":"Remarks","examples":"Examples","seealso":"See Also","declaration":"Declaration","parameters":"Parameters","typeParameters":"Type Parameters","type":"Type","name":"Name","description":"Description","returns":"Returns","fieldValue":"Field Value","propertyValue":"Property Value","eventType":"Event Type","exceptions":"Exceptions","condition":"Condition","extensionMethods":"Extension Methods","note":"<h5>Note</h5>","warning":"<h5>Warning</h5>","tip":"<h5>Tip</h5>","important":"<h5>Important</h5>","caution":"<h5>Caution</h5>","_shared":{}}}